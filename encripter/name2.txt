Ask Question
up vote
31
down vote
favorite
13
The crypto module of node.js (at the time of this writing at least) is not still deemed stable and so the API may change. In fact, the methods that everyone in the internet use to get the hash (md5, sha1, ...) of a file are considered legacy (from the documentation of Hash class) (note: emphasis mine):

Class: Hash

The class for creating hash digests of data.

It is a stream that is both readable and writable. The written data is used to compute the hash. Once the writable side of the stream is ended, use the read() method to get the computed hash digest. The legacy update and digest methods are also supported.

Returned by crypto.createHash.

Despite hash.update and hash.digest being considered legacy, the example shown just above the quoted snippet is using them.

What's the correct way of obtaining hashes without using those legacy methods?

node.js hash stream
shareimprove this question
asked Sep 6 '13 at 13:06

Carlos Campderros
13.2k54253
add a comment
5 Answers
active oldest votes
up vote
65
down vote
accepted
From the quoted snippet in the question:

[the Hash class] It is a stream that is both readable and writable. The written data is used to compute the hash. Once the writable side of the stream is ended, use the read() method to get the computed hash digest.

So what you need to hash some text is:

var crypto = require('crypto');

// change to 'md5' if you want an MD5 hash
var hash = crypto.createHash('sha1');

// change to 'binary' if you want a binary hash.
hash.setEncoding('hex');

// the text that you want to hash
hash.write('hello world');

// very important! You cannot read from the stream until you have called end()
hash.end();

// and now you get the resulting hash
var sha1sum = hash.read();
If you want to get the hash of a file, the best way is create a ReadStream from the file and pipe it into the hash:

var fs = require('fs');
var crypto = require('crypto');

// the file you want to get the hash    
var fd = fs.createReadStream('/some/file/name.txt');
var hash = crypto.createHash('sha1');
hash.setEncoding('hex');

fd.on('end', function() {
    hash.end();
    console.log(hash.read()); // the desired sha1sum
});

// read all file and pipe it (write it) to the hash object
fd.pipe(hash);
shareimprove this answer
edited Apr 9 '15 at 11:41

geon
4,66712431
answered Sep 6 '13 at 13:06

Carlos Campderros
13.2k54253
is it possible to get the data content from hash object? – sunnycmf Feb 19 '14 at 18:40
@sunnycmf what data do you mean? If you mean the original data you were hashing then I don't think so. If you mean the computed hash, then just use hash.read(). – Carlos Campderros Feb 20 '14 at 8:47
yes i mean orig data, coz want to read the file once and get the data & sha1 hash. – sunnycmf Feb 21 '14 at 16:49
5
Instead of the fd.on('end'), it would be better to handle hash.on('finish'), which does not require calling hash.end(). – Herman Kan May 6 '16 at 10:03
1
Seems to me the pipe-to-Hash-object method is much more fickle than the old-fashioned stream.on('data', data => hash.update(data)) and later calling digest('hex'). When I did the exact experiment as above but left out hash.read() because I wanted to do that on the finish event of the write-stream I got nothing, no value. Only when I call hash.read() in the end event handler as above (or in finish suggested by @HermanKan) do I get the hash. No such problems with calling hash.update(...) in a data event handler, then I can get the hash output anywhere, any time. – Morre Jul 7 '16 at 12:30 
show 1 more comment

up vote
10
down vote
Short version of Carlos' answer:

var fs = require('fs')
var crypto = require('crypto')

fs.createReadStream('/some/file/name.txt').
  pipe(crypto.createHash('sha1').setEncoding('hex')).
  on('finish', function () {
    console.log(this.read()) //the hash
  })
shareimprove this answer
edited Nov 16 '17 at 7:48
answered Mar 14 '17 at 4:18

Afanasii Kurakin
1,76111515
add a comment
up vote
8
down vote
An ES6 version returning a Promise for the hash digest:

function checksumFile(hashName, path) {
  return new Promise((resolve, reject) => {
    let hash = crypto.createHash(hashName);
    let stream = fs.createReadStream(path);
    stream.on('error', err => reject(err));
    stream.on('data', chunk => hash.update(chunk));
    stream.on('end', () => resolve(hash.digest('hex')));
  });
}
shareimprove this answer
answered Jun 20 '17 at 3:44

DS.
10.2k32730
1
I like this. Possible improvement here: gist.github.com/F1LT3R/2e4347a6609c3d0105afce68cd101561 – f1lt3r Aug 1 '17 at 4:10
add a comment
up vote
5
down vote
Further polish, ECMAScript 2015

function checksumFile(algorithm, path) {
  return new Promise((resolve, reject) =>
    fs.createReadStream(path)
      .on('error', reject)
      .pipe(crypto.createHash(algorithm)
        .setEncoding('hex'))
      .once('finish', function () {
        resolve(this.read())
      })
  )
}
shareimprove this answer
edited Dec 23 '17 at 9:30
answered Dec 23 '17 at 9:23

Harald Rudell
30933
add a comment
up vote
0
down vote
var fs = require('fs');
var crypto = require('crypto');
var fd = fs.createReadStream('data.txt');
var hash = crypto.createHash('md5');
hash.setEncoding('hex');
fd.pipe(hash);
hash.on('data', function (data) {
    console.log('# ',data);
});
shareimprove this answer
answered Mar 20 at 16:48

javelinthrow
1
4
You should explain your code so that others can understand it – Michael Mar 20 at 17:09
add a comment
Your Answer

 
Sign up or log in
 Sign up using Google
 Sign up using Facebook
 Sign up using Email and Password
 
Post as a guest
Name

Email

required, but never shown
 Post Your Answer
By clicking "Post Your Answer", you acknowledge that you have read our updated terms of service, privacy policy and cookie policy, and that your continued use of the website is subject to these policies.
Not the answer you're looking for? Browse other questions tagged node.js hash stream or ask your own question.